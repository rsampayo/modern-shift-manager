openapi: 3.0.0
info:
  title: STX Underground LLC - Clock-In & Tracking System API
  version: 1.0.0
  description: API for managing employee clock-in/out, equipment status, and media documentation

servers:
  - url: https://api.stxunderground.com/v1
    description: Production server
  - url: https://staging-api.stxunderground.com/v1
    description: Staging server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
        name:
          type: string
        role:
          type: string
          enum: [employee, supervisor, admin]
        createdAt:
          type: string
          format: date-time

    Session:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
        clockIn:
          type: string
          format: date-time
        clockOut:
          type: string
          format: date-time
        location:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number
        jsaChecklist:
          type: object
        status:
          type: string
          enum: [active, completed]

    Equipment:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          type: string
          enum: [OK, "Needs Maintenance"]
        lastCheck:
          type: string
          format: date
        maintenanceHistory:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              description:
                type: string
              technician:
                type: string

    MediaDocument:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [photo, video]
        url:
          type: string
        timestamp:
          type: string
          format: date-time
        location:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number
        userId:
          type: string

paths:
  /auth/login:
    post:
      summary: Authenticate user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                password:
                  type: string
                remember:
                  type: boolean
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  /sessions:
    get:
      summary: Get user sessions history
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: startDate
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'

    post:
      summary: Create new session (clock in)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                location:
                  type: object
                  properties:
                    latitude:
                      type: number
                    longitude:
                      type: number
                jsaChecklist:
                  type: object
      responses:
        '201':
          description: Session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'

  /sessions/{sessionId}/clock-out:
    post:
      summary: End session (clock out)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: sessionId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                location:
                  type: object
                  properties:
                    latitude:
                      type: number
                    longitude:
                      type: number
                jsaChecklist:
                  type: object
      responses:
        '200':
          description: Session ended
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'

  /equipment:
    get:
      summary: Get all equipment
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of equipment
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Equipment'

  /equipment/{equipmentId}/report:
    post:
      summary: Report equipment issue
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: equipmentId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                severity:
                  type: string
                  enum: [low, medium, high]
      responses:
        '200':
          description: Issue reported successfully

  /media:
    post:
      summary: Upload media document
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                type:
                  type: string
                  enum: [photo, video]
                location:
                  type: object
                  properties:
                    latitude:
                      type: number
                    longitude:
                      type: number
      responses:
        '201':
          description: Media uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaDocument'

    get:
      summary: Get media documents
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum: [photo, video]
        - in: query
          name: startDate
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of media documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MediaDocument'